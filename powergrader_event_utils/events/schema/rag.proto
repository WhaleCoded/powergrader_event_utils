syntax = "proto3";
package rag;

enum ScopeType {
    UNKNOWN_SCOPE = 0;
    ASSIGNMENT_SCOPE = 1;
    COURSE_SCOPE = 2;
    ORG_SCOPE = 3;
    ALL_SCOPE = 4;
}

message DocumentSource {
    string public_uuid = 1;
    string version_uuid = 2;
    string name = 3;
    string scope_uuid = 4;
    ScopeType scope_type = 5;
    uint64 version_timestamp = 8;
}

enum FileType {
    UNKNOWN_FILE_TYPE = 0;
    MARKDOWN = 1;
    TEXT = 2;
    PYTHON = 3;
}

message Document {
    string public_uuid = 1;
    string version_uuid = 2;
    string source_public_uuid = 3;
    string name = 4;
    string content = 5;
    FileType type = 6;
    uint64 version_timestamp = 7;
}


// Documents are Split into Passages and Sections
enum ContentType {
    UNKOWN_CONTENT = 0;
    DOCUMENT = 1;
    ASSIGNMENT = 2;
    SUBMISSION = 3;
}

message RAGDivisionStarted {
    string uuid = 1;
    string document_version_uuid = 2;
    string rag_method_info = 3;
    ContentType content_type = 4;
    uint64 start_timestamp = 5;
}

message RAGDivision {
    oneof division {
        Code code = 1;
        CodeBlock code_block = 2;
        List list = 3;
        Markdown markdown = 4;
        MarkdownSection markdown_section = 5;
        PythonCode python_code = 6;
        PythonFunction python_function = 7;
        PythonClass python_class = 8;
        PythonCodePassage python_code_passage = 9;
        Text text = 10;
        Paragraph paragraph = 11;
        TextPassage text_passage = 12;
    }
}

message DividedDocument {
    string rag_division_started_uuid = 1;
    repeated RAGDivision divisions = 2;
    uint64 end_timestamp = 3;
}

message Code {
    string uuid = 1;
    string parent_uuid = 2;
    
}

message CodeBlock {
    string uuid = 1;
    string parent_uuid = 2;
    string content = 3;
}

message List {
    string uuid = 1;
    string parent_uuid = 2;
    
}

message Markdown {
    string uuid = 1;
    string parent_uuid = 2;
    
}

message MarkdownSection {
    string uuid = 1;
    string parent_uuid = 2;
    
    string header = 4;
}

message PythonCode {
    string uuid = 1;
    string parent_uuid = 2;
    
}

message PythonFunction {
    string uuid = 1;
    string parent_uuid = 2;
    
    string function_definition = 4;
}

message PythonClass {
    string uuid = 1;
    string parent_uuid = 2;
    
    string class_definition = 4;
}

message PythonCodePassage {
    string uuid = 1;
    string parent_uuid = 2;
    string content = 3;
}

message Text {
    string uuid = 1;
    string parent_uuid = 2;
    
}

message Paragraph {
    string uuid = 1;
    string parent_uuid = 2;
    
}

message TextPassage {
    string uuid = 1;
    string parent_uuid = 2;
    string content = 3;
}

message DocumentSummarizationStarted {
    string uuid = 1;
    string divided_document_uuid = 2;
    string summarization_method_info = 3;
    uint64 start_timestamp = 4;
}

message DivisionSummary {
    string divison_uuid = 1;
    string version_uuid = 2;
    string summary = 3;
}

message SummarizedDocument {
    string document_summarization_started_uuid = 1;
    repeated DivisionSummary summaries = 2;
    uint64 end_timestamp = 3;
}

message DocumentEmbeddingStarted {
    string uuid = 1;
    string divided_document_uuid = 2;
    string embedding_method_info = 3;
    uint64 start_timestamp = 4;
}

message Embedding {
    repeated float embedding = 1;
}

message PassageEmbedding {
    string passage_uuid = 1;
    repeated Embedding embeddings = 3;
}

message EmbeddedDocument {
    string document_embedding_started_uuid = 1;
    repeated PassageEmbedding embeddings = 2;
    uint64 end_timestamp = 3;
}

// Instructions (Generated by RAG)
message RegisterAssignmentInstruction {
    string public_uuid = 1;
    string course_public_uuid = 2;
    string assignment_version_uuid = 3;
}

message RegisterCriterionInstruction {
    string public_uuid = 1;
    string course_public_uuid = 2;
    string assignment_version_uuid = 3;
    string criterion_uuid = 4;
}


message AssignmentInstruction {
    string public_uuid = 1;
    string version_uuid = 2;
    string content = 3;
    uint64 version_timestamp = 4;
}

message CriterionInstruction {
    string public_uuid = 1;
    string version_uuid = 2;
    string content = 3;
    uint64 version_timestamp = 4;
}


message InvalidateInstruction {
    string instruction_version_uuid = 1;
    optional bool is_assignment_instruction = 2;
}


// use instruction versions
// when an instruction is invaluuidated or changed regrade all the current grades that reference it
// mark which ones we need to regrade?

// look into the past and mark grades for regrade
// new instruction
// changed instruction
// TODO: regrade all current grades using incomplete, invaluuid, or changed instructions
// submit new grade with same value if no change was needed
// invaluuidated instruction

// look at autograder logging flow.py
message FlowNode {
    string uuid = 1;
    string name = 2;
    string content = 3;
}

message FlowLog {
    string uuid = 1;
    string name = 2;
    string ai_grading_started_uuid = 3;
    repeated FlowNode nodes = 4;
}
